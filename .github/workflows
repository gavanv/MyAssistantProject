name: My Assistant CD Run - DEV
run-name: My assistant CD Run - DEV
on:
    push:
        branches:
            - dev
            - service/statement
        # paths-ignore:
        #     - '.github/**'
        paths:
            - "!*"
            - "clarity-statements-service/**"
            - ".github/workflows/clarity-statements-service-dev.yml"
        # - '!sub-project/docs/**'
    pull_request:
permissions:
    id-token: write
    contents: read
    pull-requests: write

defaults:
    run:
        working-directory: .

jobs:
    build_and_run_my_assistant_service:
        runs-on: ubuntu-latest
        # strategy:
        #     matrix:
        #         env: ["dev"]
        # environment: ${{ matrix.env }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # - name: Configure AWS Credentials
            #   uses: aws-actions/configure-aws-credentials@v2
            #   with:
            #       role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCT_ID }}:role/github-actions-service-role
            #       role-session-name: GitHub_to_AWS_via_FederatedOIDC
            #       aws-region: "eu-central-1"

            # - name: Login to Amazon ECR
            #   id: login-ecr
            #   uses: aws-actions/amazon-ecr-login@v1

            # - name: Build, tag, and push image to Amazon ECR
            #   uses: docker/build-push-action@v2
            #   with:
            #     context: .
            #     file: Dockerfile
            #     push: true
            #     tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ACCT_NAME }}-prism:${{ github.sha }}

            # - name: Build & Push Container Image
            #   shell: bash
            #   run: |
            #       docker image build \
            #         --build-arg PULL_GITHUB_TOKEN="${{ secrets.PULL_GITHUB_TOKEN }}" \
            #             --build-arg CLARITY_TOOLBELT_BRANCH="${{ secrets.CLARITY_TOOLBELT_BRANCH }}" \
            #         --build-arg PREFECT_API_URL="${{ secrets.PREFECT_API_URL }}" \
            #             --build-arg ES_ENV_NAME="${{ secrets.ES_ENV_NAME }}" \
            #         --build-arg INFERENCE_BLOCK_NAME="${{ secrets.INFERENCE_BLOCK_NAME }}" \
            #             --build-arg STUDIO_SMTP_USER="${{ secrets.HELLO_SMTP_USER }}" \
            #         --build-arg CNN_SMTP_USER="${{ secrets.SMTP_USER }}" \
            #             --build-arg STUDIO_SMTP_PASSWORD="${{ secrets.HELLO_SMTP_PASSWORD }}" \
            #         --build-arg CNN_SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
            #             --build-arg CLARITY_STUDIO_APP_URL="${{ secrets.CLARITY_STUDIO_APP_URL }}" \
            #         --build-arg CLARITY_CNN_APP_URL="${{ secrets.APP_URL }}" \
            #         --no-cache \
            #         --progress=plain \
            #         -t "${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ACCT_NAME }}-statements:${{ github.sha }}" .

            #       docker push "${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ACCT_NAME }}-statements:${{ github.sha }}"

            - name: Build & Push Container Image
              shell: bash
              run: |
                  docker image build \
                    --build-arg PULL_GITHUB_TOKEN="${{ secrets.PULL_GITHUB_TOKEN }}" \
                        --build-arg CLARITY_TOOLBELT_BRANCH="${{ secrets.CLARITY_TOOLBELT_BRANCH }}" \
                    --build-arg PREFECT_API_URL="${{ secrets.PREFECT_API_URL }}" \
                        --build-arg ES_ENV_NAME="${{ secrets.ES_ENV_NAME }}" \
                    --build-arg INFERENCE_BLOCK_NAME="${{ secrets.INFERENCE_BLOCK_NAME }}" \
                        --build-arg STUDIO_SMTP_USER="${{ secrets.HELLO_SMTP_USER }}" \
                    --build-arg CNN_SMTP_USER="${{ secrets.SMTP_USER }}" \
                        --build-arg STUDIO_SMTP_PASSWORD="${{ secrets.HELLO_SMTP_PASSWORD }}" \
                    --build-arg CNN_SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
                        --build-arg CLARITY_STUDIO_APP_URL="${{ secrets.CLARITY_STUDIO_APP_URL }}" \
                    --build-arg CLARITY_CNN_APP_URL="${{ secrets.APP_URL }}" \
                    --no-cache \
                    --progress=plain \
                    -t "${{ vars.CLARITY_DOCKER_REGISTRY }}/platform/clarity-statements-service:${{ github.sha }}" .
                  docker push "${{ vars.CLARITY_DOCKER_REGISTRY }}/platform/clarity-statements-service:${{ github.sha }}"

            # FOR GCP:
            # - name: Build & Push Container Image
            #   shell: bash
            #   run: |
            #       docker image build --build-arg PULL_GITHUB_TOKEN=${{ secrets.PULL_GITHUB_TOKEN }} --no-cache --progress=plain --build-arg CLARITY_TOOLBELT_BRANCH=${{ secrets.CLARITY_TOOLBELT_BRANCH }} --build-arg PREFECT_API_URL=${{ secrets.PREFECT_API_URL }} --build-arg ES_ENV_NAME=${{ secrets.ES_ENV_NAME }} --build-arg INFERENCE_BLOCK_NAME=${{ secrets.INFERENCE_BLOCK_NAME }} -t "${{ vars.CLARITY_DOCKER_REGISTRY }}/platform/clarity-statements-service:dev" .
            #       docker push "${{ vars.CLARITY_DOCKER_REGISTRY }}/platform/clarity-statements-service:dev"
